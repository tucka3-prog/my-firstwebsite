{"version":3,"sources":["components/todo/AuthenticationService.js","components/todo/AuthenticatedRoute.jsx","components/todo/LoginComponent.jsx","components/todo/ListTodosComponent.jsx","components/todo/ErrorComponent.jsx","components/todo/HeaderComponent.jsx","components/todo/FooterComponent.jsx","components/todo/LogoutComponent.jsx","api/todo/HelloWorldService.js","components/todo/WelcomeComponent.jsx","services/service.jsx","components/todo/TodoApp.jsx","services/file-service.jsx","services/fileUploader.jsx","App.js","serviceWorker.js","index.js"],"names":["username","password","console","log","sessionStorage","setItem","removeItem","getItem","AuthenticatedRoute","AuthenticationService","isUserLoggedIn","this","props","to","Component","LoginComponent","state","hasLoginFailed","showSuccessMessage","handleChange","bind","loginClicked","event","setState","target","name","value","registerSuccessfulLogin","history","push","className","type","onChange","onClick","ListTodosComponent","todos","id","description","done","targetDate","Date","map","todo","key","toString","ErrorComponent","HeaderComponent","href","logout","FooterComponent","LogoutComponent","Axios","get","WelcomeComponent","welcomeMessage","retrieveWelcomeMessage","handleSuccessfullRespone","match","params","HelloWorldService","executeHelloWorldService","then","response","data","serviceInstance","axios","create","baseURL","timeout","headers","FileService","service","getRestClient","post","FileUploader","handleUploadFile","FormData","file","files","append","fileService","uploadFileToServer","catch","error","status","message","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b77814c9.chunk.js","sourcesContent":["class AuthenticationService {\n\n    registerSuccessfulLogin(username,password){\n        console.log('registerSuccessfulLogin')\n        sessionStorage.setItem('authenticatedUser', username);\n    }\n\n    logout() {\n        sessionStorage.removeItem('authenticatedUser');\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(user===null) return false\n        return true\n    }\n}\n\nexport default new AuthenticationService()","import React, {Component} from 'react'\nimport {Route, Redirect} from 'react-router-dom'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass AuthenticatedRoute extends Component {    \n    render() {\n        if(AuthenticationService.isUserLoggedIn()) {\n            return <Route {...this.props}/>\n        } else {\n            return <Redirect to=\"/login\"/>\n        }\n\n    }\n}\n\nexport default AuthenticatedRoute","import React, {Component} from 'react'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass LoginComponent extends Component {\n    \n    constructor(props) {\n        super(props)\n        \n        this.state = {\n            username: 'in28minutes',\n            password: '',\n            hasLoginFailed: false,\n            showSuccessMessage: false\n        }\n        // this.handleUsernameChange = this.handleUsernameChange.bind(this)\n        // this.handlePasswordChange = this.handlePasswordChange.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.loginClicked = this.loginClicked.bind(this)\n    }\n\n    handleChange(event) {\n        //console.log(this.state);\n        this.setState(\n            {\n                [event.target.name]\n                  :event.target.value\n            }\n        )\n    }\n\n    // handleUsernameChange(event) {\n    //     console.log(event.target.name);\n    //     this.setState(\n    //         {\n    //             [event.target.name]\n    //               :event.target.value\n    //         }\n    //     )\n    // }\n\n    // handlePasswordChange(event) {\n    //     console.log(event.target.value);\n    //     this.setState({password:event.target.value})\n    // }\n\n    loginClicked() {\n        //in28minutes,dummy\n        if(this.state.username==='in28minutes' && this.state.password==='dummy'){\n            AuthenticationService.registerSuccessfulLogin(this.state.username,this.state.password)\n            this.props.history.push(`/welcome/${this.state.username}`)\n            //this.setState({showSuccessMessage:true})\n            //this.setState({hasLoginFailed:false})\n        }\n        else {\n            this.setState({showSuccessMessage:false})\n            this.setState({hasLoginFailed:true})\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Login</h1>\n                <div className=\"container\">\n                    {/*<ShowInvalidCredentials hasLoginFailed={this.state.hasLoginFailed}/>*/}\n                    {this.state.hasLoginFailed && <div className=\"alert alert-warning\">Invalid Credentials</div>}\n                    {this.state.showSuccessMessage && <div>Login Sucessful</div>}\n                    {/*<ShowLoginSuccessMessage showSuccessMessage={this.state.showSuccessMessage}/>*/}\n                    User Name: <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange}/>\n                    Password: <input type=\"password\" name=\"password\" value={this.state.password}  onChange={this.handleChange}/>\n                    <button className=\"btn btn-success\" onClick={this.loginClicked}>Login</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default LoginComponent","import React, {Component} from 'react'\n\nclass ListTodosComponent extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            todos : \n            [\n             {id: 1, description : 'Learn to Dance', done:false, targetDate: new Date()},\n             {id: 2, description : 'Become an Expert at React', done:false, targetDate: new Date()},\n             {id: 3, description : 'Visit India', done:false, targetDate: new Date()}\n            ]\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                 <h1>List Todos</h1>\n                 <div className=\"container\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>Description</th>\n                                <th>Target Date</th>\n                                <th>IsCompleted?</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                        {\n                            this.state.todos.map (\n                                todo =>\n                                    <tr key={todo.id}>\n                                        <td>{todo.description}</td>\n                                        <td>{todo.done.toString()}</td>\n                                        <td>{todo.targetDate.toString()}</td>\n                                    </tr>\n                            )\n                            }\n                        </tbody>\n                    </table>\n                 </div>\n            </div>\n        )\n    }\n}\n\nexport default ListTodosComponent","import React, {Component} from 'react'\n\nfunction ErrorComponent() {\n    return <div>An Error Occurred. I don't know what to do! Contact support at abcd-efgh-ijkl</div>\n}\n\nexport default ErrorComponent","import React, {Component} from 'react'\nimport {Link} from 'react-router-dom'\nimport AuthenticationService from './AuthenticationService.js'\n\n\nclass HeaderComponent extends Component {\n    render() {\n        const isUserLoggedIn = AuthenticationService.isUserLoggedIn();\n        //console.log(isUserLoggedIn);\n\n        return (\n            <header>\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n                    <div><a href=\"http://www.in28minutes.com\" className=\"navbar-brand\">in28Minutes</a></div>\n                    <ul className=\"navbar-nav\">\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/welcome/in28minutes\">Home</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/todos\">Todos</Link></li>}\n                    </ul>\n                    <ul className=\"navbar-nav navbar-collapse justify-content-end\">\n                        {!isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/login\">Login</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/logout\" onClick={AuthenticationService.logout}>Logout</Link></li>}\n                    </ul>\n                </nav>\n            </header>\n        )\n    }\n}\n\nexport default HeaderComponent","import React, {Component} from 'react'\n\nclass FooterComponent extends Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                <span className=\"text-muted\">All Rights Reserved 2018 @in28minutes</span>\n            </footer>\n        )\n    }\n}\n\nexport default FooterComponent","import React, {Component} from 'react'\n\nclass LogoutComponent extends Component {\n    render() {\n        return (\n            <>\n                <h1>You are logged out</h1>\n                <div className=\"container\">\n                    Thank You for Using Our Application.\n                </div>\n            </>\n        )\n    }\n}\n\nexport default LogoutComponent","import Axios from \"axios\";\r\n\r\nclass HelloWorldService{\r\n    executeHelloWorldService() {\r\n        return Axios.get(\"http://localhost:8080/hello-world\")\r\n    }\r\n}\r\n\r\nexport default new HelloWorldService()","import React, {Component} from 'react'\nimport {Link} from 'react-router-dom'\nimport HelloWorldService from '../../api/todo/HelloWorldService'\n\nclass WelcomeComponent extends Component {\n    constructor(props) {\n        super(props)\n            this.state = {\n                welcomeMessage: \"\"\n            }\n        this.retrieveWelcomeMessage = this.retrieveWelcomeMessage.bind(this)\n        this.handleSuccessfullRespone = this.handleSuccessfullRespone.bind(this)\n    }\n\n    render() {\n        return (\n            <>\n                <h1>Welcome!</h1>\n                <div className=\"container\">\n                Welcome {this.props.match.params.name}.\n                You can manage your todos <Link to=\"/todos\">here</Link>.\n                </div>\n\n                <div className=\"container\">\n                Click here to get message from eclispe! :D\n                <button onClick={this.retrieveWelcomeMessage} className=\"btn btn-success\">Get Welcome message</button>\n                </div>\n                <div className=\"container\">\n                {this.state.welcomeMessage}\n                </div>\n            </>\n        )        \n    }\n\nretrieveWelcomeMessage() {\n    HelloWorldService.executeHelloWorldService()\n    .then(response => this.handleSuccessfullRespone(response))\n}\n\n\n\nhandleSuccessfullRespone(response) {\n    this.setState({welcomeMessage:response.data})\n}\n\n}\n\n\nexport default WelcomeComponent","import axios from 'axios';\r\nclass Service {\r\n\r\n  constructor() {\r\n    console.log(\"Service is constructed\");\r\n  }\r\n\r\n  getRestClient() {\r\n    if (!this.serviceInstance) {\r\n      this.serviceInstance = axios.create({\r\n        baseURL: 'http://34.69.99.40:8080/',\r\n        timeout: 10000,\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n      });\r\n    }\r\n    return this.serviceInstance;\r\n  }\r\n}\r\n\r\nexport default (new Service());","import React, {Component} from 'react'\nimport {BrowserRouter as Router, Route, Switch, Link} from 'react-router-dom'\nimport AuthenticatedRoute from './AuthenticatedRoute.jsx'\nimport LoginComponent from './LoginComponent.jsx'\nimport ListTodosComponent from './ListTodosComponent.jsx'\nimport ErrorComponent from './ErrorComponent.jsx'\nimport HeaderComponent from './HeaderComponent.jsx'\nimport FooterComponent from './FooterComponent.jsx'\nimport LogoutComponent from './LogoutComponent.jsx'\nimport WelcomeComponent from './WelcomeComponent.jsx'\n\nclass TodoApp extends Component {\n    render() {\n        return (\n            <div className=\"TodoApp\">\n                <Router>\n                    <>\n                        <HeaderComponent/>\n                        <Switch>\n                            <Route path=\"/\" exact component={LoginComponent}/>\n                            <Route path=\"/login\" component={LoginComponent}/>\n                            <AuthenticatedRoute path=\"/welcome/:name\" component={WelcomeComponent}/>\n                            <AuthenticatedRoute path=\"/todos\" component={ListTodosComponent}/>\n                            <AuthenticatedRoute path=\"/logout\" component={LogoutComponent}/>\n                            <Route component={ErrorComponent}/>\n                        </Switch>\n                        <FooterComponent/>\n                    </>\n                </Router>\n                {/*<LoginComponent/>\n                <WelcomeComponent/>*/}\n            </div>\n        )\n    }\n}\n\nexport default TodoApp","import service from './service.jsx';\r\n\r\nexport class FileService {\r\n    uploadFileToServer(data){\r\n        //returns Promise object\r\n        return service.getRestClient().post('/files', data);\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { FileService } from '../services/file-service.jsx';\r\n\r\nexport class FileUploader extends Component {\r\n    constructor() {\r\n        super();\r\n        this.fileService = new FileService();\r\n    }\r\n\r\n    handleUploadFile = (event) => {\r\n        const data = new FormData();\r\n        //using File API to get chosen file\r\n        let file = event.target.files[0];\r\n        console.log(\"Uploading file\", event.target.files[0]);\r\n        data.append('file', event.target.files[0]);\r\n        data.append('name', 'my_file');\r\n        data.append('description', 'this file is uploaded by Erikas');\r\n        let self = this;\r\n        //calling async Promise and handling response or error situation\r\n        this.fileService.uploadFileToServer(data).then((response) => {\r\n            console.log(\"File \" + file.name + \" is uploaded\");\r\n        }).catch(function (error) {\r\n            console.log(error);\r\n            if (error.response) {\r\n                //HTTP error happened\r\n                console.log(\"Upload error. HTTP error/status code=\",error.response.status);\r\n            } else {\r\n                //some other error happened\r\n               console.log(\"Upload error. HTTP error/status code=\",error.message);\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input type=\"file\" onChange={this.handleUploadFile} />\r\n            </div>\r\n        )\r\n    };\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport TodoApp from \"./components/todo/TodoApp\";\nimport \"./bootstrap.css\";\nimport {FileUploader} from './services/fileUploader.jsx';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          {/*<Counter/>*/}\n          {/*<TodoApp/>*/}\n          <FileUploader />\n      </div>\n      \n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}